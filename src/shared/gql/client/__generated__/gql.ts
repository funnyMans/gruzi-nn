/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation CreateBroker($input: CreateBrokerInput!) {\n    createBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n": typeof types.CreateBrokerDocument,
    "\n  mutation UpdateBroker($input: UpdateBrokerInput!) {\n    updateBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n": typeof types.UpdateBrokerDocument,
    "\n  query GetBrokerById($brokerId: ID!) {\n    broker(brokerId: $brokerId) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n      associatedShipments\n    }\n  }\n": typeof types.GetBrokerByIdDocument,
    "\n  query GetAllBrokers {\n    brokers {\n      brokerId\n      name\n      licenseNumber\n      contact {\n        phone\n        email\n      }\n    }\n  }\n": typeof types.GetAllBrokersDocument,
    "\n  mutation CreateCarrier($input: CreateCarrierInput!) {\n    createCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n": typeof types.CreateCarrierDocument,
    "\n  mutation UpdateCarrier($input: UpdateCarrierInput!) {\n    updateCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n": typeof types.UpdateCarrierDocument,
    "\n  query GetCarrierById($carrierId: ID!) {\n    carrier(carrierId: $carrierId) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n      driverIDs\n      truckIDs\n    }\n  }\n": typeof types.GetCarrierByIdDocument,
    "\n  query GetAllCarriers {\n    carriers {\n      carrierId\n      name\n      companyId\n      verified\n      rating\n    }\n  }\n": typeof types.GetAllCarriersDocument,
    "\n  query GetFAQs($audience: String, $category: String, $isActive: Boolean) {\n    faqs(audience: $audience, category: $category, isActive: $isActive) {\n      id\n      question\n      answer\n      category\n      audience\n      isActive\n    }\n  }\n": typeof types.GetFaQsDocument,
    "\n  mutation CreatePrivacyPolicy(\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    createPrivacyPolicy(\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n": typeof types.CreatePrivacyPolicyDocument,
    "\n  mutation UpdatePrivacyPolicy(\n    $id: ID!\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    updatePrivacyPolicy(\n      id: $id\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n": typeof types.UpdatePrivacyPolicyDocument,
    "\n  query getPrivacyPolicy($id: ID!) {\n    privacyPolicy(id: $id) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n": typeof types.GetPrivacyPolicyDocument,
    "\n  mutation CreateShipment($input: CreateShipmentInput!) {\n    createShipment(input: $input) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": typeof types.CreateShipmentDocument,
    "\n  mutation UpdateShipmentStatus($shipmentId: ID!, $status: ShipmentStatus!) {\n    updateShipmentStatus(shipmentId: $shipmentId, status: $status) {\n      shipmentId\n      status\n    }\n  }\n": typeof types.UpdateShipmentStatusDocument,
    "\n  mutation AddTrackingUpdate($shipmentId: ID!, $input: TrackingUpdateInput!) {\n    addTrackingUpdate(shipmentId: $shipmentId, input: $input) {\n      shipmentId\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": typeof types.AddTrackingUpdateDocument,
    "\n  query GetShipmentById($shipmentId: ID!) {\n    shipment(shipmentId: $shipmentId) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": typeof types.GetShipmentByIdDocument,
    "\n  query GetShipmentsByStatus($status: ShipmentStatus) {\n    shipments(status: $status) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": typeof types.GetShipmentsByStatusDocument,
    "\n  query GetAllShipments {\n    shipments {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": typeof types.GetAllShipmentsDocument,
    "\n  mutation CreateTermsOfUse($effectiveDate: String!, $terms: TermsInput!) {\n    createTermsOfUse(effectiveDate: $effectiveDate, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n": typeof types.CreateTermsOfUseDocument,
    "\n  mutation UpdateTermsOfUse($id: ID!, $terms: TermsInput!) {\n    updateTermsOfUse(id: $id, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n": typeof types.UpdateTermsOfUseDocument,
    "\n  query GetTermsOfUse($id: ID!) {\n    termsOfUse(id: $id) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n": typeof types.GetTermsOfUseDocument,
};
const documents: Documents = {
    "\n  mutation CreateBroker($input: CreateBrokerInput!) {\n    createBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n": types.CreateBrokerDocument,
    "\n  mutation UpdateBroker($input: UpdateBrokerInput!) {\n    updateBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n": types.UpdateBrokerDocument,
    "\n  query GetBrokerById($brokerId: ID!) {\n    broker(brokerId: $brokerId) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n      associatedShipments\n    }\n  }\n": types.GetBrokerByIdDocument,
    "\n  query GetAllBrokers {\n    brokers {\n      brokerId\n      name\n      licenseNumber\n      contact {\n        phone\n        email\n      }\n    }\n  }\n": types.GetAllBrokersDocument,
    "\n  mutation CreateCarrier($input: CreateCarrierInput!) {\n    createCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n": types.CreateCarrierDocument,
    "\n  mutation UpdateCarrier($input: UpdateCarrierInput!) {\n    updateCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n": types.UpdateCarrierDocument,
    "\n  query GetCarrierById($carrierId: ID!) {\n    carrier(carrierId: $carrierId) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n      driverIDs\n      truckIDs\n    }\n  }\n": types.GetCarrierByIdDocument,
    "\n  query GetAllCarriers {\n    carriers {\n      carrierId\n      name\n      companyId\n      verified\n      rating\n    }\n  }\n": types.GetAllCarriersDocument,
    "\n  query GetFAQs($audience: String, $category: String, $isActive: Boolean) {\n    faqs(audience: $audience, category: $category, isActive: $isActive) {\n      id\n      question\n      answer\n      category\n      audience\n      isActive\n    }\n  }\n": types.GetFaQsDocument,
    "\n  mutation CreatePrivacyPolicy(\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    createPrivacyPolicy(\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n": types.CreatePrivacyPolicyDocument,
    "\n  mutation UpdatePrivacyPolicy(\n    $id: ID!\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    updatePrivacyPolicy(\n      id: $id\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n": types.UpdatePrivacyPolicyDocument,
    "\n  query getPrivacyPolicy($id: ID!) {\n    privacyPolicy(id: $id) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n": types.GetPrivacyPolicyDocument,
    "\n  mutation CreateShipment($input: CreateShipmentInput!) {\n    createShipment(input: $input) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": types.CreateShipmentDocument,
    "\n  mutation UpdateShipmentStatus($shipmentId: ID!, $status: ShipmentStatus!) {\n    updateShipmentStatus(shipmentId: $shipmentId, status: $status) {\n      shipmentId\n      status\n    }\n  }\n": types.UpdateShipmentStatusDocument,
    "\n  mutation AddTrackingUpdate($shipmentId: ID!, $input: TrackingUpdateInput!) {\n    addTrackingUpdate(shipmentId: $shipmentId, input: $input) {\n      shipmentId\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": types.AddTrackingUpdateDocument,
    "\n  query GetShipmentById($shipmentId: ID!) {\n    shipment(shipmentId: $shipmentId) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": types.GetShipmentByIdDocument,
    "\n  query GetShipmentsByStatus($status: ShipmentStatus) {\n    shipments(status: $status) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": types.GetShipmentsByStatusDocument,
    "\n  query GetAllShipments {\n    shipments {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n": types.GetAllShipmentsDocument,
    "\n  mutation CreateTermsOfUse($effectiveDate: String!, $terms: TermsInput!) {\n    createTermsOfUse(effectiveDate: $effectiveDate, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n": types.CreateTermsOfUseDocument,
    "\n  mutation UpdateTermsOfUse($id: ID!, $terms: TermsInput!) {\n    updateTermsOfUse(id: $id, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n": types.UpdateTermsOfUseDocument,
    "\n  query GetTermsOfUse($id: ID!) {\n    termsOfUse(id: $id) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n": types.GetTermsOfUseDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateBroker($input: CreateBrokerInput!) {\n    createBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBroker($input: CreateBrokerInput!) {\n    createBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateBroker($input: UpdateBrokerInput!) {\n    updateBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBroker($input: UpdateBrokerInput!) {\n    updateBroker(input: $input) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetBrokerById($brokerId: ID!) {\n    broker(brokerId: $brokerId) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n      associatedShipments\n    }\n  }\n"): (typeof documents)["\n  query GetBrokerById($brokerId: ID!) {\n    broker(brokerId: $brokerId) {\n      brokerId\n      name\n      licenseNumber\n      address {\n        street\n        city\n        state\n        zip\n      }\n      contact {\n        phone\n        email\n      }\n      associatedShipments\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllBrokers {\n    brokers {\n      brokerId\n      name\n      licenseNumber\n      contact {\n        phone\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllBrokers {\n    brokers {\n      brokerId\n      name\n      licenseNumber\n      contact {\n        phone\n        email\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateCarrier($input: CreateCarrierInput!) {\n    createCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n"): (typeof documents)["\n  mutation CreateCarrier($input: CreateCarrierInput!) {\n    createCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateCarrier($input: UpdateCarrierInput!) {\n    updateCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCarrier($input: UpdateCarrierInput!) {\n    updateCarrier(input: $input) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCarrierById($carrierId: ID!) {\n    carrier(carrierId: $carrierId) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n      driverIDs\n      truckIDs\n    }\n  }\n"): (typeof documents)["\n  query GetCarrierById($carrierId: ID!) {\n    carrier(carrierId: $carrierId) {\n      carrierId\n      name\n      companyId\n      legalForm\n      contact {\n        phone\n        email\n      }\n      address {\n        street\n        city\n        state\n        zip\n      }\n      verified\n      rating\n      driverIDs\n      truckIDs\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllCarriers {\n    carriers {\n      carrierId\n      name\n      companyId\n      verified\n      rating\n    }\n  }\n"): (typeof documents)["\n  query GetAllCarriers {\n    carriers {\n      carrierId\n      name\n      companyId\n      verified\n      rating\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFAQs($audience: String, $category: String, $isActive: Boolean) {\n    faqs(audience: $audience, category: $category, isActive: $isActive) {\n      id\n      question\n      answer\n      category\n      audience\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query GetFAQs($audience: String, $category: String, $isActive: Boolean) {\n    faqs(audience: $audience, category: $category, isActive: $isActive) {\n      id\n      question\n      answer\n      category\n      audience\n      isActive\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePrivacyPolicy(\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    createPrivacyPolicy(\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePrivacyPolicy(\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    createPrivacyPolicy(\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePrivacyPolicy(\n    $id: ID!\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    updatePrivacyPolicy(\n      id: $id\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePrivacyPolicy(\n    $id: ID!\n    $lastUpdated: String!\n    $introduction: String!\n    $sections: [PrivacyPolicySectionInput!]!\n  ) {\n    updatePrivacyPolicy(\n      id: $id\n      lastUpdated: $lastUpdated\n      introduction: $introduction\n      sections: $sections\n    ) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getPrivacyPolicy($id: ID!) {\n    privacyPolicy(id: $id) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPrivacyPolicy($id: ID!) {\n    privacyPolicy(id: $id) {\n      id\n      lastUpdated\n      introduction\n      sections {\n        title\n        content\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateShipment($input: CreateShipmentInput!) {\n    createShipment(input: $input) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateShipment($input: CreateShipmentInput!) {\n    createShipment(input: $input) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateShipmentStatus($shipmentId: ID!, $status: ShipmentStatus!) {\n    updateShipmentStatus(shipmentId: $shipmentId, status: $status) {\n      shipmentId\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateShipmentStatus($shipmentId: ID!, $status: ShipmentStatus!) {\n    updateShipmentStatus(shipmentId: $shipmentId, status: $status) {\n      shipmentId\n      status\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddTrackingUpdate($shipmentId: ID!, $input: TrackingUpdateInput!) {\n    addTrackingUpdate(shipmentId: $shipmentId, input: $input) {\n      shipmentId\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddTrackingUpdate($shipmentId: ID!, $input: TrackingUpdateInput!) {\n    addTrackingUpdate(shipmentId: $shipmentId, input: $input) {\n      shipmentId\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetShipmentById($shipmentId: ID!) {\n    shipment(shipmentId: $shipmentId) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShipmentById($shipmentId: ID!) {\n    shipment(shipmentId: $shipmentId) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetShipmentsByStatus($status: ShipmentStatus) {\n    shipments(status: $status) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetShipmentsByStatus($status: ShipmentStatus) {\n    shipments(status: $status) {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAllShipments {\n    shipments {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllShipments {\n    shipments {\n      shipmentId\n      brokerId\n      driverId\n      truckId\n      cargoDetails {\n        description\n        weight\n        volume\n        dimensions {\n          length\n          width\n          height\n        }\n        costValue\n        currency\n        handlingInstructions\n        isHazardous\n        hazardousDetails {\n          unNumber\n          class\n          packingGroup\n        }\n        cargoCategory\n      }\n      pickupLocation {\n        address\n        city\n        state\n        zip\n      }\n      deliveryLocation {\n        address\n        city\n        state\n        zip\n      }\n      status\n      timestamps {\n        scheduledPickup\n        actualPickup\n        scheduledDelivery\n        actualDelivery\n      }\n      trackingUpdates {\n        timestamp\n        location {\n          latitude\n          longitude\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateTermsOfUse($effectiveDate: String!, $terms: TermsInput!) {\n    createTermsOfUse(effectiveDate: $effectiveDate, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTermsOfUse($effectiveDate: String!, $terms: TermsInput!) {\n    createTermsOfUse(effectiveDate: $effectiveDate, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTermsOfUse($id: ID!, $terms: TermsInput!) {\n    updateTermsOfUse(id: $id, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTermsOfUse($id: ID!, $terms: TermsInput!) {\n    updateTermsOfUse(id: $id, terms: $terms) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTermsOfUse($id: ID!) {\n    termsOfUse(id: $id) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTermsOfUse($id: ID!) {\n    termsOfUse(id: $id) {\n      id\n      effectiveDate\n      terms {\n        general {\n          title\n          intro\n        }\n        sections {\n          title\n          content {\n            term\n            definition\n          }\n        }\n        acknowledgement\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;